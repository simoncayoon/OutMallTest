package com.beetron.outmall.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.beetron.outmall.models.UserInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_MODEL".
*/
public class UserInfoModelDao extends AbstractDao<UserInfoModel, String> {

    public static final String TABLENAME = "USER_INFO_MODEL";

    /**
     * Properties of entity UserInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Mail = new Property(1, String.class, "mail", false, "MAIL");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Headimg = new Property(4, String.class, "headimg", false, "HEADIMG");
        public final static Property Uname = new Property(5, String.class, "uname", false, "UNAME");
        public final static Property Dengji = new Property(6, String.class, "dengji", false, "DENGJI");
        public final static Property Tel = new Property(7, String.class, "tel", false, "TEL");
        public final static Property Upass = new Property(8, String.class, "upass", false, "UPASS");
        public final static Property City = new Property(9, String.class, "city", false, "CITY");
        public final static Property Unid = new Property(10, String.class, "unid", false, "UNID");
        public final static Property Area = new Property(11, String.class, "area", false, "AREA");
        public final static Property Refer = new Property(12, String.class, "refer", false, "REFER");
        public final static Property Address = new Property(13, String.class, "address", false, "ADDRESS");
        public final static Property Province = new Property(14, String.class, "province", false, "PROVINCE");
        public final static Property Openid = new Property(15, String.class, "openid", false, "OPENID");
        public final static Property Jifen = new Property(16, String.class, "jifen", false, "JIFEN");
        public final static Property Cunkuan = new Property(17, String.class, "cunkuan", false, "CUNKUAN");
    };


    public UserInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_MODEL\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid
                "\"MAIL\" TEXT," + // 1: mail
                "\"SEX\" TEXT," + // 2: sex
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"HEADIMG\" TEXT," + // 4: headimg
                "\"UNAME\" TEXT," + // 5: uname
                "\"DENGJI\" TEXT," + // 6: dengji
                "\"TEL\" TEXT," + // 7: tel
                "\"UPASS\" TEXT," + // 8: upass
                "\"CITY\" TEXT," + // 9: city
                "\"UNID\" TEXT," + // 10: unid
                "\"AREA\" TEXT," + // 11: area
                "\"REFER\" TEXT," + // 12: refer
                "\"ADDRESS\" TEXT," + // 13: address
                "\"PROVINCE\" TEXT," + // 14: province
                "\"OPENID\" TEXT," + // 15: openid
                "\"JIFEN\" TEXT," + // 16: jifen
                "\"CUNKUAN\" TEXT);"); // 17: cunkuan
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_MODEL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfoModel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid());
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(2, mail);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String headimg = entity.getHeadimg();
        if (headimg != null) {
            stmt.bindString(5, headimg);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(6, uname);
        }
 
        String dengji = entity.getDengji();
        if (dengji != null) {
            stmt.bindString(7, dengji);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(8, tel);
        }
 
        String upass = entity.getUpass();
        if (upass != null) {
            stmt.bindString(9, upass);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        String unid = entity.getUnid();
        if (unid != null) {
            stmt.bindString(11, unid);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(12, area);
        }
 
        String refer = entity.getRefer();
        if (refer != null) {
            stmt.bindString(13, refer);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(14, address);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(15, province);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(16, openid);
        }
 
        String jifen = entity.getJifen();
        if (jifen != null) {
            stmt.bindString(17, jifen);
        }
 
        String cunkuan = entity.getCunkuan();
        if (cunkuan != null) {
            stmt.bindString(18, cunkuan);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfoModel readEntity(Cursor cursor, int offset) {
        UserInfoModel entity = new UserInfoModel( //
            cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mail
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headimg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dengji
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // upass
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // city
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // unid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // area
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // refer
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // address
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // province
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // openid
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // jifen
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // cunkuan
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfoModel entity, int offset) {
        entity.setUid(cursor.getString(offset + 0));
        entity.setMail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadimg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDengji(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpass(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUnid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setArea(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRefer(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setProvince(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOpenid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setJifen(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCunkuan(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserInfoModel entity, long rowId) {
        return entity.getUid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserInfoModel entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
